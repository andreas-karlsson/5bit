<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="dJZYW?t}R`#o`_?Oms1n">buf</variable><variable id="?k62B5+]eaMY?d3SQ*:p">ip</variable><variable id="fXw^n{r)NH|X4u4]Iz[o">stack</variable><variable id="M}[`)-[S8[ui}hv29sTw">list</variable></variables><block type="pxt-on-start" id="2=Q8#ZJ(F_+,^lI[EO;E" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="l`m^=S?Y7dV4_p%R5FB9" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let buf:Bit[] = []" numlines="1" declaredvars="buf"></mutation><next><block type="typescript_statement" id="2,Cljc$7J0+Ro`H}R?Kh" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ip = 0" numlines="1" declaredvars="ip"></mutation><next><block type="typescript_statement" id="uW9wQAn@O.y44GK8/h36" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let stack: Uint5[] = []" numlines="1" declaredvars="stack"></mutation><next><block type="typescript_statement" id="(E{I)u|GQ]#6x45CH6@o" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Inst {" line1="    NOP," line2="    PUSH," line3="    DUP," line4="    READ," line5="    ADD," line6="    DUMP_STACK," line7="    DEC," line8="    JMP_NZ," line9="    EXEC" line10="}" numlines="11"></mutation><next><block type="typescript_statement" id=".i_;n;|gSv/:1XDwF]hl" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="type Bit = 0 | 1" numlines="1"></mutation><next><block type="typescript_statement" id="Fl#Ybd)*XrZju,G3#NRj" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="type Uint5 = number" numlines="1"></mutation><next><block type="function_call" id="!rSl5dkRLc~CrSL+ah9x"><mutation name="exec" functionid="WD3iIN18TS?(cKnWy;,["><arg name="program" id="qjugiet0qlbt5cppm8qf" type="Array"></arg></mutation><value name="qjugiet0qlbt5cppm8qf"><shadow type="variables_get"><field name="VAR" id="M}[`)-[S8[ui}hv29sTw">list</field></shadow><block type="lists_create_with" id="W*un+!+]B8*I+@(IPJTP" inline="false"><mutation items="5" horizontalafter="3"></mutation><value name="ADD0"><block type="typescript_expression" id="|@jHa0QalfQZq~/xA1Bj" editable="false"><field name="EXPRESSION">Inst.READ</field></block></value><value name="ADD1"><block type="typescript_expression" id="X_BCbN)8a8IxVDMH3RO5" editable="false"><field name="EXPRESSION">Inst.DUP</field></block></value><value name="ADD2"><block type="typescript_expression" id="4UN]fvoYx%XQpO`|2q^$" editable="false"><field name="EXPRESSION">Inst.JMP_NZ</field></block></value><value name="ADD3"><shadow type="math_number" id="FaOV%B^yxxE_1BdM3Gec"><field name="NUM">0</field></shadow></value><value name="ADD4"><block type="typescript_expression" id="nU/e(lDwGU!+VNZ:ESD)" editable="false"><field name="EXPRESSION">// Inst.DUMP_STACK
    Inst.EXEC</field></block></value></block></value><next><block type="typescript_statement" id="}{SDtXr(S/Aa??+tWL*5" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function prompt(y = 0):Uint5 {" line1="    buf = []" line2="    let value2 = 0" line3="    let blink = true" line4="    while(buf.length &lt; 5) {" line5="        basic.pause(100)" line6="        value2 = valueOfBuf();" line7="        print(value2, y);" line8="        if(blink) led.plot(4 - buf.length, y);" line9="        blink = !blink;" line10="    }" line11="    return value2;" line12="}" numlines="13"></mutation><next><block type="typescript_statement" id="32:AD%,}|W0;lG1D33bF" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function print(value: Uint5, y = 0) {" line1="    if(y &gt; 4 || y &lt; 0) return;" line2="    for(let x = 4; x &gt;= 0; x--) {" line3="        if(value &amp; 1) {" line4="            led.plot(x, y)" line5="        } else {" line6="            led.unplot(x, y)" line7="        }" line8="        value &gt;&gt;= 1" line9="    }" line10="}" numlines="11"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="V($9OK1u%FKUNkx*||e`" x="539" y="20"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="array_push" id="^q1]JFs{pS=e!(iuu69j"><value name="list"><block type="variables_get" id=".2.1:~,SaUjYC#?9yuq,"><field name="VAR" id="dJZYW?t}R`#o`_?Oms1n">buf</field></block></value><value name="value"><shadow type="math_number" id="|qK7pV`?y-Occ%xa.)k("><field name="NUM">0</field></shadow></value></block></statement></block><block type="device_button_event" id="n+jz#~cVgB%aAIQI!(=H" x="937" y="20"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="array_push" id="(}i1gMd.eJNu|OC*8H$h"><value name="list"><block type="variables_get" id="6uwo-zDdD^;t/s4J*EJX"><field name="VAR" id="dJZYW?t}R`#o`_?Oms1n">buf</field></block></value><value name="value"><shadow type="math_number" id="afwzUI,p,#oAKo6I8xq2"><field name="NUM">1</field></shadow></value></block></statement></block><block type="device_button_event" id="xUb{3Gapf}|E,qjE|o.}" x="1334" y="20"><field name="NAME">Button.AB</field><statement name="HANDLER"><block type="variables_set" id="($6~#Beq-5?iLFOU*;8]"><field name="VAR" id="dJZYW?t}R`#o`_?Oms1n">buf</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id=":Fawyth|h)Om|c2F3]M."><mutation items="0" horizontalafter="3"></mutation></block></value></block></statement></block><block type="function_definition" id="k7LE54_^W/$fJU^`W6^I" x="1713" y="20"><mutation name="exec" functionid="WD3iIN18TS?(cKnWy;,["><arg name="program" id="qjugiet0qlbt5cppm8qf" type="Array"></arg></mutation><field name="function_name">exec</field><value name="qjugiet0qlbt5cppm8qf"><shadow type="argument_reporter_array" id="iFfYKJUySmqzR]HvNO:,"><field name="VALUE">program</field></shadow></value><statement name="STACK"><block type="device_while" id="UZR7xj-5$Ml63@69k/{@"><value name="COND"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="fmb3tX++6H%+4Kg$)i!X"><field name="OP">LT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="eZXw=??A[?)lCii$CZa("><field name="VAR" id="?k62B5+]eaMY?d3SQ*:p">ip</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length" id="MTy?9YN%ezhx2a.GBh6`"><value name="VALUE"><block type="argument_reporter_array" id="Y#a3aZ4Cw,Y/+8#v{/kA"><field name="VALUE">program</field></block></value></block></value></block></value><statement name="DO"><block type="typescript_statement" id="h@Rd~afSGN^dYyyR2LEr" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (program[ip++]) {" line1="            case Inst.PUSH:" line2="                stack.push(program[ip++]);" line3="                break;" line4="            case Inst.DUMP_STACK:" line5="                basic.clearScreen();" line6="                for (let i = 0; i &lt; stack.length; i++) {" line7="                    print(stack[i], i);" line8="                }" line9="                basic.pause(1000)" line10="                break;" line11="            case Inst.ADD:" line12="                stack.push(stack.pop() + stack.pop());" line13="                break;" line14="            case Inst.JMP_NZ:" line15="                const addr = program[ip++]" line16="                if (stack.pop() != 0) {" line17="                    ip = addr;" line18="                }" line19="                break;" line20="            case Inst.DUP:" line21="                const value = stack.pop();" line22="                stack.push(value);" line23="                stack.push(value);" line24="                break;" line25="            case Inst.DEC:" line26="                stack.push(stack.pop() - 1);" line27="                break;" line28="            case Inst.READ:" line29="                stack.push(prompt());" line30="                break;" line31="            case Inst.EXEC:" line32="                stack = [exec(stack)];" line33="                break;" line34="        }" numlines="35"></mutation></block></statement><next><block type="function_return" id="_~3sTPbWXl$)yw@UIfBN"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="array_pop" id=".^42mROIa0oDz*l`ayBA"><value name="list"><block type="variables_get" id="hNE?~JOKZj6:Q`2%xno;"><field name="VAR" id="fXw^n{r)NH|X4u4]Iz[o">stack</field></block></value></block></value></block></next></block></statement></block><block type="function_definition" id="v^uzGsI7{5cNmsX_V@U9" x="2363" y="20"><mutation name="valueOfBuf" functionid="bI#OMWe$!f;=Cqb#yV9e"></mutation><field name="function_name">valueOfBuf</field><statement name="STACK"><block type="function_return" id="}W7H$a=sajGxUmXy-P#U"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="PH:{8=CWkVI0|u-)cmp0" editable="false"><field name="EXPRESSION">buf.reduce((value, bit, pos) =&gt; value | bit &lt;&lt; pos, 0)</field></block></value></block></statement></block><block type="led_set_display_mode" id="+B{:BWZThb`a7^^Zgzo;" disabled="true" x="20" y="2129"><field name="mode">DisplayMode.BlackAndWhite</field></block></xml>